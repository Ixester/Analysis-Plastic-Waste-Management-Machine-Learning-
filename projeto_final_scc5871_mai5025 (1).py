# -*- coding: utf-8 -*-
"""PROJETO FINAL SCC5871/MAI5025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fcezUizerW7ELqxPLzFzHRevbwOBW0_c

#PROJETO FINAL
SCC5871/MAI5025 - APRENDIZADO DE MÁQUINA




```
# This is formatted as code
```

Italo Xesteres Silva Almeida
João Victor de Lira Ribeiro

# Análise temporal
"""

import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

# Carregar o arquivo CSV usando files.upload()
uploaded = files.upload()

# Obter o nome do arquivo carregado
file_name = next(iter(uploaded))

# Carregar o conjunto de dados
df = pd.read_csv(file_name)

# Exibir as primeiras linhas do dataframe
print(df.head())

# Verificar informações gerais sobre o conjunto de dados
print(df.info())

# Verificar valores ausentes
print(df.isnull().sum())

print(uploaded)

# Listar todos os países que fazem parte deste dataset

df['Country'].unique()

# Verificar se há valores ausentes
print(df.isnull().sum())

# Sumarizar os resíduos plásticos mal gerenciados para 2010 e 2019
total_2010 = df['Total_MismanagedPlasticWaste_2010 (millionT)'].sum()
total_2019 = df['Total_MismanagedPlasticWaste_2019 (millionT)'].sum()

# Criar um novo dataframe com os anos e os totais globais
df_global = pd.DataFrame({
    'Year': [2010, 2019],
    'Total_MismanagedPlasticWaste': [total_2010, total_2019]
})

print(df_global)

# Visualizar a tendência ao longo do tempo (gráfico de linha)
plt.figure(figsize=(10, 6))
plt.plot(df_global['Year'], df_global['Total_MismanagedPlasticWaste'], marker='o')
plt.title('Resíduos Plásticos Mal Gerenciados ao Longo dos Anos')
plt.xlabel('Ano')
plt.ylabel('Quantidade de Resíduos Plásticos Mal Gerenciados (milhões de toneladas)')
plt.grid(True)
plt.show()

# Visualizar a evolução ao longo do tempo (gráfico de área)
plt.figure(figsize=(10, 6))
plt.fill_between(df_global['Year'], df_global['Total_MismanagedPlasticWaste'], color='skyblue', alpha=0.4)
plt.plot(df_global['Year'], df_global['Total_MismanagedPlasticWaste'], marker='o', color='blue', alpha=0.6)
plt.title('Evolução dos Resíduos Plásticos Mal Gerenciados (2010-2019)')
plt.xlabel('Ano')
plt.ylabel('Quantidade de Resíduos Plásticos Mal Gerenciados (milhões de toneladas)')
plt.grid(True)
plt.show()

# Calcular a taxa de crescimento dos resíduos plásticos mal gerenciados
growth_rate = (total_2019 - total_2010) / total_2010 * 100
print(f'Taxa de Crescimento de 2010 para 2019: {growth_rate:.2f}%')

# Visualizar a mudança absoluta entre 2010 e 2019
plt.figure(figsize=(10, 6))
plt.bar(df_global['Year'], df_global['Total_MismanagedPlasticWaste'], color=['lightblue', 'lightgreen'])
plt.title('Mudança Absoluta de Resíduos Plásticos Mal Gerenciados (2010 vs 2019)')
plt.xlabel('Ano')
plt.ylabel('Quantidade de Resíduos Plásticos (milhões de toneladas)')
plt.show()

# Corrigir os nomes das colunas removendo espaços em branco extras
df.columns = df.columns.str.strip()

# Verificar as primeiras linhas do DataFrame
print(df.head())

# Escolher a coluna específica para suavização
column_name_2010 = 'Total_MismanagedPlasticWaste_2010 (millionT)'
column_name_2019 = 'Total_MismanagedPlasticWaste_2019 (millionT)'

# Calcular a média móvel com janela de 12 meses para 2010
df['Média Móvel 2010'] = df[column_name_2010].rolling(window=12, min_periods=1).mean()

# Calcular a suavização exponencial para 2010
alpha = 0.2  # Fator de suavização exponencial (ajustável conforme necessário)
df['Suavização Exponencial 2010'] = df[column_name_2010].ewm(alpha=alpha, adjust=False).mean()

# Calcular a média móvel com janela de 12 meses para 2019
df['Média Móvel 2019'] = df[column_name_2019].rolling(window=12, min_periods=1).mean()

# Calcular a suavização exponencial para 2019
df['Suavização Exponencial 2019'] = df[column_name_2019].ewm(alpha=alpha, adjust=False).mean()

# Plotar os resultados para 2010
plt.figure(figsize=(14, 7))
plt.plot(df['Country'], df[column_name_2010], label='Dados Originais 2010', marker='o')
plt.plot(df['Country'], df['Média Móvel 2010'], label='Média Móvel 2010', linestyle='--', color='orange')
plt.plot(df['Country'], df['Suavização Exponencial 2010'], label='Suavização Exponencial 2010', linestyle='-.', color='green')

plt.title(f'{column_name_2010} - Dados Originais vs Suavizados')
plt.xlabel('País')
plt.ylabel('Resíduos Plásticos Mal Geridos (milhões de toneladas)')
plt.legend()
plt.xticks(rotation='vertical')  # Rotacionar os rótulos verticalmente

# Exibir apenas alguns rótulos para melhor legibilidade
step = 10  # Exibir a cada 10 países
plt.xticks(ticks=range(0, len(df['Country']), step))

plt.grid(True)
plt.tight_layout()
plt.show()

# Plotar os resultados para 2019
plt.figure(figsize=(14, 7))
plt.plot(df['Country'], df[column_name_2019], label='Dados Originais 2019', marker='o')
plt.plot(df['Country'], df['Média Móvel 2019'], label='Média Móvel 2019', linestyle='--', color='orange')
plt.plot(df['Country'], df['Suavização Exponencial 2019'], label='Suavização Exponencial 2019', linestyle='-.', color='green')

plt.title(f'{column_name_2019} - Dados Originais vs Suavizados')
plt.xlabel('País')
plt.ylabel('Resíduos Plásticos Mal Geridos (milhões de toneladas)')
plt.legend()
plt.xticks(rotation='vertical')  # Rotacionar os rótulos verticalmente

# Exibir apenas alguns rótulos para melhor legibilidade
plt.xticks(ticks=range(0, len(df['Country']), step))

plt.grid(True)
plt.tight_layout()
plt.show()

"""# Análise comparativa"""

# Escolher as colunas para o gráfico de dispersão
column_2010 = 'Mismanaged_PlasticWaste_PerCapita_2010 (kg per year)'
column_2019 = 'Mismanaged_PlasticWaste_PerCapita_2019 (kg per year)'

# Plotar o gráfico de dispersão
plt.figure(figsize=(10, 7))
plt.scatter(df[column_2010], df[column_2019], alpha=0.7, edgecolors='w')

plt.title('Comparação de Resíduos Plásticos Mal Gerenciados per Capita (2010 vs 2019)')
plt.xlabel('Resíduos Plásticos Mal Gerenciados per Capita em 2010 (kg por ano)')
plt.ylabel('Resíduos Plásticos Mal Gerenciados per Capita em 2019 (kg por ano)')
plt.grid(True)
plt.tight_layout()
plt.show()

# Calcular medidas de tendência central e dispersão para 2010
mean_2010 = df['Mismanaged_PlasticWaste_PerCapita_2010 (kg per year)'].mean()
median_2010 = df['Mismanaged_PlasticWaste_PerCapita_2010 (kg per year)'].median()
std_dev_2010 = df['Mismanaged_PlasticWaste_PerCapita_2010 (kg per year)'].std()

print(f'--- Medidas de Tendência Central e Dispersão para 2010 ---')
print(f'Média: {mean_2010:.2f} kg por ano')
print(f'Mediana: {median_2010:.2f} kg por ano')
print(f'Desvio Padrão: {std_dev_2010:.2f} kg por ano')

# Calcular medidas de tendência central e dispersão para 2019
mean_2019 = df['Mismanaged_PlasticWaste_PerCapita_2019 (kg per year)'].mean()
median_2019 = df['Mismanaged_PlasticWaste_PerCapita_2019 (kg per year)'].median()
std_dev_2019 = df['Mismanaged_PlasticWaste_PerCapita_2019 (kg per year)'].std()

print(f'--- Medidas de Tendência Central e Dispersão para 2019 ---')
print(f'Média: {mean_2019:.2f} kg por ano')
print(f'Mediana: {median_2019:.2f} kg por ano')
print(f'Desvio Padrão: {std_dev_2019:.2f} kg por ano')

#Classificação

# Categorizar os países em grupos (p. ex.:, alta, média e baixa gestão de resíduos) para facilitar a comparação.

# Calcular percentis para 2010 e 2019
percentile_25_2010 = df['Mismanaged_PlasticWaste_PerCapita_2010 (kg per year)'].quantile(0.25)
percentile_50_2010 = df['Mismanaged_PlasticWaste_PerCapita_2010 (kg per year)'].quantile(0.50)
percentile_75_2010 = df['Mismanaged_PlasticWaste_PerCapita_2010 (kg per year)'].quantile(0.75)

percentile_25_2019 = df['Mismanaged_PlasticWaste_PerCapita_2019 (kg per year)'].quantile(0.25)
percentile_50_2019 = df['Mismanaged_PlasticWaste_PerCapita_2019 (kg per year)'].quantile(0.50)
percentile_75_2019 = df['Mismanaged_PlasticWaste_PerCapita_2019 (kg per year)'].quantile(0.75)

print('--- Percentis para 2010 ---')
print(f'25º percentil: {percentile_25_2010:.2f} kg por ano')
print(f'50º percentil (mediana): {percentile_50_2010:.2f} kg por ano')
print(f'75º percentil: {percentile_75_2010:.2f} kg por ano')

print('--- Percentis para 2019 ---')
print(f'25º percentil: {percentile_25_2019:.2f} kg por ano')
print(f'50º percentil (mediana): {percentile_50_2019:.2f} kg por ano')
print(f'75º percentil: {percentile_75_2019:.2f} kg por ano')

# Definir critérios de classificação

# Dados de 2010
high_threshold_2010 = percentile_25_2010
low_threshold_2010 = percentile_75_2010

# Classificar os países com base nos critérios definidos
def classify_countries(row):
    if row['Mismanaged_PlasticWaste_PerCapita_2010 (kg per year)'] < high_threshold_2010:
        return 'Alta Gestão'
    elif row['Mismanaged_PlasticWaste_PerCapita_2010 (kg per year)'] < low_threshold_2010:
        return 'Média Gestão'
    else:
        return 'Baixa Gestão'

# Aplicar a função de classificação ao DataFrame
df['Classificação_2010'] = df.apply(classify_countries, axis=1)

# Contar o número de países em cada categoria para 2010
counts_2010 = df['Classificação_2010'].value_counts()

print('--- Distribuição de Países por Categoria em 2010 ---')
print(counts_2010)

# Dados de 2019
high_threshold_2019 = percentile_25_2019
low_threshold_2019 = percentile_75_2019

# Classificar os países com base nos critérios definidos
def classify_countries(row):
    if row['Mismanaged_PlasticWaste_PerCapita_2019 (kg per year)'] < high_threshold_2019:
        return 'Alta Gestão'
    elif row['Mismanaged_PlasticWaste_PerCapita_2019 (kg per year)'] < low_threshold_2019:
        return 'Média Gestão'
    else:
        return 'Baixa Gestão'

# Aplicar a função de classificação ao DataFrame
df['Classificação_2019'] = df.apply(classify_countries, axis=1)

# Contar o número de países em cada categoria para 2019
counts_2019 = df['Classificação_2019'].value_counts()

print('--- Distribuição de Países por Categoria em 2019 ---')
print(counts_2019)

# Mapa coroplético

!pip install geopandas

# Carregar a biblioteca para plotar os mapas
import geopandas as gpd

# Carregar o shapefile mundial
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

# Renomear a coluna do shapefile para corresponder à coluna do CSV
world = world.rename(columns={'name': 'Country'})

# Mesclar os dados para os anos de 2010 e 2019
merged_2010 = world.merge(df[['Country', 'Total_MismanagedPlasticWaste_2010 (millionT)']],
                          on='Country', how='left')
merged_2019 = world.merge(df[['Country', 'Total_MismanagedPlasticWaste_2019 (millionT)']],
                          on='Country', how='left')

# Carregar o shapefile mundial
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
world = world.rename(columns={'name': 'Country'})

# Mesclar os dados para os anos de 2010 e 2019
merged_2010 = world.merge(df[['Country', 'Total_MismanagedPlasticWaste_2010 (millionT)']],
                          on='Country', how='left')
merged_2019 = world.merge(df[['Country', 'Total_MismanagedPlasticWaste_2019 (millionT)']],
                          on='Country', how='left')

# Configurar o mapa para 2010
fig, ax = plt.subplots(1, 1, figsize=(15, 10))
merged_2010.plot(column='Total_MismanagedPlasticWaste_2010 (millionT)', ax=ax, legend=True,
                 legend_kwds={'label': "Mismanaged Plastic Waste 2010 (million tons)",
                              'orientation': "horizontal"},
                 missing_kwds={"color": "lightgrey"})

# Remover as bordas com as coordenadas geográficas
ax.axis('off')

# Mostrar o mapa de 2010
plt.title('Mismanaged Plastic Waste in 2010')
plt.show()

# Configurar o mapa para 2019
fig, ax = plt.subplots(1, 1, figsize=(15, 10))
merged_2019.plot(column='Total_MismanagedPlasticWaste_2019 (millionT)', ax=ax, legend=True,
                 legend_kwds={'label': "Mismanaged Plastic Waste 2019 (million tons)",
                              'orientation': "horizontal"},
                 missing_kwds={"color": "lightgrey"})

# Remover as bordas com as coordenadas geográficas
ax.axis('off')

# Mostrar o mapa de 2019
plt.title('Mismanaged Plastic Waste in 2019')
plt.show()

# Carregar o shapefile mundial
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
world = world.rename(columns={'name': 'Country'})

# Mesclar os dados para os anos de 2010 e 2019 (Per Capita)
merged_2010_percapita = world.merge(df[['Country', 'Mismanaged_PlasticWaste_PerCapita_2010 (kg per year)']],
                                    on='Country', how='left')
merged_2019_percapita = world.merge(df[['Country', 'Mismanaged_PlasticWaste_PerCapita_2019 (kg per year)']],
                                    on='Country', how='left')

# Função para plotar mapas
def plot_map(data, column, title, legend_label):
    fig, ax = plt.subplots(1, 1, figsize=(15, 10))
    data.plot(column=column, ax=ax, legend=True,
              legend_kwds={'label': legend_label,
                           'orientation': "horizontal"},
              missing_kwds={"color": "lightgrey"})
    ax.axis('off')
    plt.title(title)
    plt.show()

plot_map(merged_2010_percapita, 'Mismanaged_PlasticWaste_PerCapita_2010 (kg per year)',
         'Mismanaged Plastic Waste Per Capita in 2010', 'Mismanaged Plastic Waste Per Capita 2010 (kg per year)')

plot_map(merged_2019_percapita, 'Mismanaged_PlasticWaste_PerCapita_2019 (kg per year)',
         'Mismanaged Plastic Waste Per Capita in 2019', 'Mismanaged Plastic Waste Per Capita 2019 (kg per year)')

"""#Identificação de correlações"""

# Importando as bibliotecas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Configurando visualizações com o whitegrid
sns.set(style="whitegrid")

# Carregando o dataset disponível em https://www.kaggle.com/code/isaaclangit/plastic-waste-around-the-world/notebook
from google.colab import files
uploaded = files.upload()
data = pd.read_csv(next(iter(uploaded)))

# Exibindo as primeiras linhas do nosso dataset
print("Primeiras linhas do dataset:")
print(data.head())

# Convertendo colunas relevantes para numérico (correção do erro 'Albania')
data['Total_MismanagedPlasticWaste_2010 (millionT)'] = pd.to_numeric(data['Total_MismanagedPlasticWaste_2010 (millionT)'], errors='coerce')
data['Total_MismanagedPlasticWaste_2019 (millionT)'] = pd.to_numeric(data['Total_MismanagedPlasticWaste_2019 (millionT)'], errors='coerce')
data['Mismanaged_PlasticWaste_PerCapita_2010 (kg per year) '] = pd.to_numeric(data['Mismanaged_PlasticWaste_PerCapita_2010 (kg per year) '], errors='coerce')
data['Mismanaged_PlasticWaste_PerCapita_2019 (kg per year) '] = pd.to_numeric(data['Mismanaged_PlasticWaste_PerCapita_2019 (kg per year) '], errors='coerce')

# Removendo valores nulos
data.dropna(subset=[
    'Total_MismanagedPlasticWaste_2010 (millionT)',
    'Total_MismanagedPlasticWaste_2019 (millionT)',
    'Mismanaged_PlasticWaste_PerCapita_2010 (kg per year) ',
    'Mismanaged_PlasticWaste_PerCapita_2019 (kg per year) '
], inplace=True)

# Criando a matriz de correlação, excluindo a coluna 'Country'
correlation_matrix = data.drop(columns=['Country']).corr()

# Exibindo a matriz de correlação
print("Matriz de Correlação:")
print(correlation_matrix)

# Plotando a matriz de correlação
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Matriz de Correlação')
plt.show()

# Gráfico de dispersão: Plásticos Mal Gerenciados Totais e Per Capita (exemp)
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Total_MismanagedPlasticWaste_2010 (millionT)', y='Mismanaged_PlasticWaste_PerCapita_2010 (kg per year) ', data=data)
plt.title('Relação entre Resíduos Plásticos Mal Gerenciados Totais e Per Capita em 2010')
plt.xlabel('Resíduos Plásticos Mal Gerenciados Totais (2010)')
plt.ylabel('Resíduos Plásticos Mal Gerenciados Per Capita (2010)')
plt.show()

# Gráfico de dispersão: Relação entre resíduos plásticos mal gerenciados em 2010 e 2019
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Total_MismanagedPlasticWaste_2010 (millionT)', y='Total_MismanagedPlasticWaste_2019 (millionT)', data=data)
plt.title('Relação entre Resíduos Plásticos Mal Gerenciados em 2010 e 2019')
plt.xlabel('Resíduos Plásticos Mal Gerenciados (2010)')
plt.ylabel('Resíduos Plásticos Mal Gerenciados (2019)')
plt.show()

"""#Modelagem preditiva

"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
import matplotlib.pyplot as plt

# Carregamento e visualização dos dados
from google.colab import files
uploaded = files.upload()
file_name = list(uploaded.keys())[0]
df = pd.read_csv(file_name)
print(df.head())

# Remover espaços em branco e fazer o pré-processamento
df.columns = df.columns.str.strip()
df = df.dropna()
X = df[['Total_MismanagedPlasticWaste_2010 (millionT)', 'Mismanaged_PlasticWaste_PerCapita_2010 (kg per year)']]
y = df['Total_MismanagedPlasticWaste_2019 (millionT)']

# Conjuntos de treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Modelo de Regressão Linear
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
lr_predictions = lr_model.predict(X_test)

# Avaliação do modelo de Regressão Linear
lr_mae = mean_absolute_error(y_test, lr_predictions)
lr_r2 = r2_score(y_test, lr_predictions)
print(f'Regressão Linear - MAE: {lr_mae}, R²: {lr_r2}')

# Validação cruzada Regressão Linear
lr_cv_scores = cross_val_score(lr_model, X, y, cv=5, scoring='neg_mean_absolute_error')
print(f'Regressão Linear - Validação Cruzada MAE: {-lr_cv_scores.mean()}')

# Modelo Random Forest
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)
rf_predictions = rf_model.predict(X_test)

# Avaliação do modelo Random Forest
rf_mae = mean_absolute_error(y_test, rf_predictions)
rf_r2 = r2_score(y_test, rf_predictions)
print(f'Random Forest - MAE: {rf_mae}, R²: {rf_r2}')

# Validação cruzada Random Forest
rf_cv_scores = cross_val_score(rf_model, X, y, cv=5, scoring='neg_mean_absolute_error')
print(f'Random Forest - Validação Cruzada MAE: {-rf_cv_scores.mean()}')

# Previsões do Random Forest
plt.figure(figsize=(10,5))
plt.plot(y_test.values, label='Valores Reais')
plt.plot(rf_predictions, label='Previsões Random Forest', color='red')
plt.legend()
plt.show()